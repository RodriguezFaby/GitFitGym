/*-------------------------Crear un tablespace------------------------------*/
create tablespace TBS_PROYECTO datafile
'C:\Users\Mau\Music\Lenguaje-BD\oradata\ORCL\proyecto1.dbf ' size 20M default storage (initial
1m next 1m pctincrease 0);

/*-----------------------MODIFCAR LA SESSION---------------------------------*/
alter session set "_ORACLE_SCRIPT"=true;
/*----------------------Habilitar outputs------------------------------------*/
SET SERVEROUTPUT ON;
/*SELECT tablespace_name, file_name
FROM dba_data_files
WHERE tablespace_name = 'TBS_PROYECTO';
*/

--alter tablespace TBS_PROYECTO ADD DATAFILE 'C:\Users\Mau\Music\Lenguaje-BD\oradata\ORCL\PROYECTO1.DBF' size 20M AUTOEXTEND ON NEXT 1M MAXSIZE UNLIMITED;
/*------------Asigno a mi usuario el tablespack creado----------------------*/
alter user adm_proyecto quota unlimited on TBS_PROYECTO;

/*creacion de users y asignarles el tablespace TBS_PROYECTO*/
create user adm_db identified by "123456" default tablespace TBS_PROYECTO;
create user adm_cliente identified by "123456" default tablespace TBS_PROYECTO;
create user adm_membresias identified by "123456" default tablespace TBS_PROYECTO;

/*create user adm_clases identified by "123456" default tablespace TBS_PROYECTO;
create user adm_instructores identified by "123456" default tablespace TBS_PROYECTO;
create user adm_reservas identified by "123456" default tablespace TBS_PROYECTO;*/

/*---------------Creacion de rols---------------------------------------*/
create role rol_adm_db;
create role rol_adm_cliente;
create role rol_adm_membresias;

/*create role rol_adm_clases;
create role rol_adm_instructores;
create role rol_adm_reservas;*/


/*----------------------DAR permisos especificos a un rol--------------*/
/*GRANT SELECT,INSERT,UPDATE,DELETE ON CLIENTE TO rol_adm_cliente;*/

/*Dar permisos a users, en este caso a adm_db*/
/*grant create session to adm_db;
grant connect to adm_db;
grant dba to adm_db;*/


/*---------------------CREAR TABLAS--------------------------------*/

create table CLIENTE
(
    ID_CLIENTE INT NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR (50) NOT NULL,
    APELLIDO VARCHAR (50) NOT NULL,
    FECHAINGRESO DATE NOT NULL,
    MENSUALIDAD INT NOT NULL
);

create table AUD_CLIENTE
(
    CONSECUTIVO NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 NOT NULL,
    ID_CLIENTE INT NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR (50) NOT NULL,
    APELLIDO VARCHAR (50) NOT NULL,
    FECHAINGRESO DATE NOT NULL,
    MENSUALIDAD INT NOT NULL,
    
    ACCION VARCHAR(100) NOT NULL,
    FECHA_MOV TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USUARIO_MOV VARCHAR2(100) DEFAULT USER
);


create table MEMBRESIAS
(
    ID_MEMBRESIA INT NOT NULL PRIMARY KEY,
    TIPO VARCHAR (50) NOT NULL,
    ESTADO VARCHAR (50) NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    FECHA_EXPIRACION DATE NOT NULL,
    ID_CLIENTE INT NOT NULL
);

create table EMPLEADO(
    ID_EMPLEADO INT NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR (20) NOT NULL,
    APELLIDO VARCHAR (25) NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    ESTADO VARCHAR(45) NOT NULL,
    SALARIO INT NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    TELEFONO INT NOT NULL,
    PUESTO VARCHAR(50) NOT NULL
);

create table AUD_EMPLEADO(

    CONSECUTIVO NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 NOT NULL,
    ID_EMPLEADO INT NOT NULL PRIMARY KEY,
    NOMBRE VARCHAR (20) NOT NULL,
    APELLIDO VARCHAR (25) NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    ESTADO VARCHAR(45) NOT NULL,
    SALARIO INT NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    TELEFONO INT NOT NULL,
    PUESTO VARCHAR(50) NOT NULL,
    
    ACCION VARCHAR(100) NOT NULL,
    FECHA_MOV TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USUARIO_MOV VARCHAR2(100) DEFAULT USER
);

create table CLASES(
    ID_CLASE INT NOT NULL PRIMARY KEY,
    DESCRIPCION VARCHAR (50) NOT NULL,
    ESTADO VARCHAR(45) NOT NULL,
    ESPACIOS INT NOT NULL,
    ID_EMPLEADO INT NOT NULL,
    ID_HORARIO INT NOT NULL
);

create table AUD_CLASES(

    CONSECUTIVO NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 NOT NULL,
    ID_CLASE INT NOT NULL PRIMARY KEY,
    DESCRIPCION VARCHAR (50) NOT NULL,
    ESTADO VARCHAR(45) NOT NULL,
    ESPACIOS INT NOT NULL,
    ID_EMPLEADO INT NOT NULL,
    ID_HORARIO INT NOT NULL,
    
    ACCION VARCHAR(100) NOT NULL,
    FECHA_MOV TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USUARIO_MOV VARCHAR2(100) DEFAULT USER
);    

create table RESERVAS(
    ID_RESERVA INT NOT NULL PRIMARY KEY,
    ESTADO VARCHAR(45) NOT NULL,
    ID_CLASE INT NOT NULL,
    ID_CLIENTE INT NOT NULL
);

create table AUD_RESERVAS(
    CONSECUTIVO NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 NOT NULL,
    ID_RESERVA INT NOT NULL PRIMARY KEY,
    ESTADO VARCHAR(45) NOT NULL,
    ID_CLASE INT NOT NULL,
    ID_CLIENTE INT NOT NULL,
    
    ACCION VARCHAR(100) NOT NULL,
    FECHA_MOV TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USUARIO_MOV VARCHAR2(100) DEFAULT USER
);

create table HORARIO(
    ID_HORARIO INT NOT NULL PRIMARY KEY,
    DIA VARCHAR (20) NOT NULL,
    HORA_INICIO TIMESTAMP  NOT NULL,
    HORA_FIN TIMESTAMP  NOT NULL
);

create table FACTURA(
    CONSECUTIVO NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 1 NOT NULL,
    ID_FACTURA INT NOT NULL PRIMARY KEY,
    ID_CLIENTE INT NOT NULL,
    MONTO INT NOT NULL,
    FECHA DATE NOT NULL,
    DESCRIPCION VARCHAR (100) NOT NULL
);

create table AUD_FACTURA(
    ID_FACTURA INT NOT NULL PRIMARY KEY,
    ID_CLIENTE INT NOT NULL,
    MONTO INT NOT NULL,
    FECHA DATE NOT NULL,
    DESCRIPCION VARCHAR (100) NOT NULL,
    
    ACCION VARCHAR(100) NOT NULL,
    FECHA_MOV TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    USUARIO_MOV VARCHAR2(100) DEFAULT USER
);


/*------------Agregar FK de tablas--------------------------------------*/

/* FK para tabla MEMBRESIAS*/
alter table "ADM_PROYECTO"."MEMBRESIAS" 
add constraint FK_ID_CLIENTE 
foreign key("ID_CLIENTE") 
references "CLIENTE"("ID_CLIENTE");

/* FK para tabla CLASES*/
alter table "ADM_PROYECTO"."CLASES" 
add constraint FK_ID_EMPLEADO 
foreign key("ID_EMPLEADO") 
references "EMPLEADO"("ID_EMPLEADO");

alter table "ADM_PROYECTO"."CLASES" 
add constraint FK_ID_HORARIO 
foreign key("ID_HORARIO") 
references "HORARIO"("ID_HORARIO");

/* FK para tabla RESERVAS*/
alter table "ADM_PROYECTO"."RESERVAS" 
add constraint FK_ID_CLASE 
foreign key("ID_CLASE") 
references "CLASES"("ID_CLASE");

alter table "ADM_PROYECTO"."RESERVAS" 
add constraint FK_ID_RCLIENTE 
foreign key("ID_CLIENTE") 
references "CLIENTE"("ID_CLIENTE");

/* FK para tabla FACTURA*/
alter table "ADM_PROYECTO"."FACTURA" 
add constraint FK_ID_FCLIENTE 
foreign key("ID_FACTURA") 
references "FACTURA"("ID_FACTURA");


/*-------------------Inserts------------------------------*/
insert into CLIENTE values(1,'Fabiola','Rodriguez','09/10/2023',1);
insert into CLIENTE values(2,'Carlos','Rodriguez','15/03/2023',2);
insert into CLIENTE values(3,'Lucia','Vargas','03/09/2023',1);

insert into MEMBRESIAS values(1,'VIP','Activo','11/11/2023','11/12/2023',1);
insert into MEMBRESIAS values(2,'STANDARD','Activo','15/10/2023','15/11/2023',2);
insert into MEMBRESIAS values(3,'VIP','Activo','03/11/2023','03/12/2023',3);

insert into HORARIO values(1,'Lunes', TO_TIMESTAMP('14:00', 'HH24:MI:SS'), TO_TIMESTAMP('17:00', 'HH24:MI:SS'));
insert into HORARIO values(2,'Martes', TO_TIMESTAMP('16:00', 'HH24:MI:SS'), TO_TIMESTAMP('18:00', 'HH24:MI:SS'));
insert into HORARIO values(3,'Martes', TO_TIMESTAMP('18:00', 'HH24:MI:SS'), TO_TIMESTAMP('20:00', 'HH24:MI:SS'));

insert into EMPLEADO values(1,'Felipe','Castro','01/10/2023', 'Activo', 400000, 'fcatro@gmail.com', 78125878, 'Instructor');
insert into EMPLEADO values(2,'Alonso','Rojas','11/02/2023', 'Activo', 250000, 'arojas@gmail.com', 45715684, 'Secretario');
insert into EMPLEADO values(3,'Kristel','Lopez','05/03/2023', 'Activo', 400000, 'klopez@gmail.com', 78965812, 'Instructor');

insert into CLASES values(1,'Funcional','Activa',15,1,1);
insert into CLASES values(2,'Boxing','Activa',15,3,2);
insert into CLASES values(3,'Yoga','Activa',10,3,3);

insert into RESERVAS values(1, 'Confirmada', 2, 1);
insert into RESERVAS values(2, 'Pendiente', 1, 3);
insert into RESERVAS values(3, 'Confirmada', 3, 2);

insert into FACTURA values(1, 1, 50000, TO_DATE('2023-10-30', 'YYYY-MM-DD'), 'Pago de membresia');
insert into FACTURA values(2, 2, 30000, TO_DATE('2023-11-05', 'YYYY-MM-DD'), 'Pago de clases de yoga');
insert into FACTURA values(3, 3, 75000, TO_DATE('2023-11-10', 'YYYY-MM-DD'), 'Pago de entrenamiento personal');


/*Ver los inserts*/
SELECT * FROM CLIENTE;
SELECT * FROM MEMBRESIAS;
SELECT * FROM EMPLEADO;
SELECT * FROM RESERVAS;
SELECT * FROM HORARIO;
SELECT * FROM FACTURA;

/*-------------------------PROCEDIMIENTOS ALMACENADOS-------------------*/

/*---------SP para insertar clientes-------------------*/
CREATE OR REPLACE PROCEDURE INSERT_CLIENTE(
	   c_ID_CLIENTE IN CLIENTE.ID_CLIENTE%TYPE,
	   c_NOMBRE IN CLIENTE.NOMBRE%TYPE,
	   c_APELLIDO IN CLIENTE.APELLIDO %TYPE,
	   c_FECHAINGRESO IN CLIENTE.FECHAINGRESO%TYPE,
	   c_MENSUALIDAD IN CLIENTE.MENSUALIDAD%TYPE)
AS
BEGIN

  INSERT INTO CLIENTE ("ID_CLIENTE", "NOMBRE", "APELLIDO", "FECHAINGRESO","MENSUALIDAD") 
  VALUES (c_ID_CLIENTE, c_NOMBRE, c_APELLIDO, c_FECHAINGRESO, c_MENSUALIDAD);
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('El registro de ' || c_NOMBRE || ' ha sido insertado');

END;

/*---------------correr el procedimiento---------------*/
EXEC INSERT_CLIENTE(8,'Xinias','Lopes','09/10/2023',2);

---------------Trigger se dispara cuando un cliente es agregado-----------------------
CREATE OR REPLACE TRIGGER TGR_INSERT_CLIENTE
BEFORE INSERT ON CLIENTE
FOR EACH ROW
BEGIN
    INSERT INTO AUD_CLIENTE (
        ID_CLIENTE,
        NOMBRE,
        APELLIDO,
        FECHAINGRESO,
        MENSUALIDAD,
        ACCION
    ) VALUES (
        :NEW.ID_CLIENTE,
        :NEW.NOMBRE,
        :NEW.APELLIDO,
        :NEW.FECHAINGRESO,
        :NEW.MENSUALIDAD,
        'INSERT'
    );
END;

/*---------SP para modificar la mensualidad de los clientes-------------------*/
CREATE OR REPLACE PROCEDURE UPDATE_CLIENTE(
	   c_ID_CLIENTE IN CLIENTE.ID_CLIENTE%TYPE,
	   c_MENSUALIDAD IN CLIENTE.MENSUALIDAD%TYPE)
AS
BEGIN

  UPDATE CLIENTE
    SET MENSUALIDAD = c_MENSUALIDAD
    WHERE ID_CLIENTE = c_ID_CLIENTE;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('El registro del cliente con ID: ' || c_ID_CLIENTE || ' ha sido modificado');

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_CLIENTE(6,1);


/*---------SP para eliminar clientes-------------------*/
CREATE OR REPLACE PROCEDURE DELETE_CLIENTE(
	   c_ID_CLIENTE IN CLIENTE.ID_CLIENTE%TYPE)
AS
BEGIN

  DELETE FROM CLIENTE
    WHERE ID_CLIENTE = c_ID_CLIENTE;
  DBMS_OUTPUT.PUT_LINE('El registro del cliente con ID: ' || c_ID_CLIENTE || ' ha sido eliminado');

END;

/*---------------correr el procedimiento---------------*/
EXEC DELETE_CLIENTE(5)

/*---------SP para insertar membresias-------------------*/
CREATE OR REPLACE PROCEDURE INSERT_MEMBRESIA(
	   m_ID_MEMBRESIA IN MEMBRESIAS.ID_MEMBRESIA%TYPE,
	   m_TIPO IN MEMBRESIAS.TIPO%TYPE,
	   m_ESTADO IN MEMBRESIAS.ESTADO%TYPE,
	   m_FECHA_INICIO IN MEMBRESIAS.FECHA_INICIO%TYPE,
	   m_FECHA_EXPIRACION IN MEMBRESIAS.FECHA_EXPIRACION%TYPE,
	   m_ID_CLIENTE IN MEMBRESIAS.ID_CLIENTE%TYPE)
IS
BEGIN

  INSERT INTO MEMBRESIAS("ID_MEMBRESIA", "TIPO", "ESTADO", "FECHA_INICIO","FECHA_EXPIRACION","ID_CLIENTE") 
  VALUES (m_ID_MEMBRESIA, m_TIPO, m_ESTADO, m_FECHA_INICIO, m_FECHA_EXPIRACION, m_ID_CLIENTE);
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('El registro de ' || m_ID_MEMBRESIA || ' ha sido insertado');

END;

/*---------------correr el procedimiento---------------*/
EXEC INSERT_MEMBRESIA(4,'Standard','Activo','10/11/2023','10/12/2023',1);

/*---------SP para modificar el estado de membresia segun el ID del cliente----*/
CREATE OR REPLACE PROCEDURE UPDATE_MEMBRESIAS(
	   m_ID_CLIENTE IN MEMBRESIAS.ID_CLIENTE%TYPE,
	   m_ESTADO IN MEMBRESIAS.ESTADO%TYPE)
AS
BEGIN

  UPDATE MEMBRESIAS
    SET ESTADO = m_ESTADO
    WHERE ID_CLIENTE = m_ID_CLIENTE;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('EL estado de la membresia del cliente con ID: ' || m_ID_CLIENTE || ' ha sido modificado');

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_MEMBRESIAS(4,'Inactivo');

/*---------SP para eliminar clientes-------------------*/
CREATE OR REPLACE PROCEDURE DELETE_MEMBRESIA(
	   m_ID_MEMBRESIA IN MEMBRESIAS.ID_MEMBRESIA %TYPE)
AS
BEGIN

  DELETE FROM MEMBRESIAS
    WHERE ID_MEMBRESIA = m_ID_MEMBRESIA;
  DBMS_OUTPUT.PUT_LINE('El registro de la membresia con ID: ' || m_ID_MEMBRESIA || ' ha sido eliminada');

END;

/*---------------correr el procedimiento---------------*/
EXEC DELETE_MEMBRESIA(4);
--------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE INSERT_RESERVA(
    r_ID_RESERVA IN INT,
    r_ESTADO_RESERVA IN VARCHAR2,
    r_ID_CLASE IN INT,
    r_ID_CLIENTE IN INT
) AS
    c_ESPACIOS_DISPONIBLES INT;
BEGIN
    --Cuantos espacios hay disponibles en la clase
    SELECT ESPACIOS INTO c_ESPACIOS_DISPONIBLES
    FROM CLASES
    WHERE ID_CLASE = r_ID_CLASE;
    IF c_ESPACIOS_DISPONIBLES > 0 THEN
        --Si hay espacios, se inserta la reserva
        INSERT INTO RESERVAS (
            ID_RESERVA,
            ESTADO,
            ID_CLASE,
            ID_CLIENTE
        ) VALUES (
            r_ID_RESERVA,
            r_ESTADO_RESERVA,
            r_ID_CLASE,
            r_ID_CLIENTE
        );

        --Se actualiza la tabla Clases y se elimina un espacio
        UPDATE CLASES
        SET ESPACIOS = c_ESPACIOS_DISPONIBLES - 1
        WHERE ID_CLASE = r_ID_CLASE;
        COMMIT;

        DBMS_OUTPUT.PUT_LINE('La resrva fue creada y se reducio un espacio en la clase ' || r_ID_CLASE);
    ELSE
        -- Si no hay espacio
        DBMS_OUTPUT.PUT_LINE('No hay suficiente espacio para esta clase.');
    END IF;
END INSERT_RESERVA;
/
-------------------------------------------------------------------------
EXEC INSERT_RESERVA(6,'Activa',3,3);

/*---------SP para modificar el estado de la reserva de los clientes-------------------*/
CREATE OR REPLACE PROCEDURE UPDATE_RESERVA(
	   r_ID_RESERVA IN RESERVAS.ID_RESERVA%TYPE,
	   r_ESTADO IN RESERVAS.ESTADO%TYPE)
AS
BEGIN

  UPDATE RESERVAS
    SET ESTADO = r_ESTADO
    WHERE ID_RESERVA = r_ID_RESERVA;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('El registro del estado con ID: ' || r_ID_RESERVA || ' ha sido modificado');

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_RESERVA(1,'Pendiente');

/*---------SP para eliminar reservas-------------------*/
CREATE OR REPLACE PROCEDURE DELETE_RESERVAS(
	   r_ID_RESERVA IN RESERVAS.ID_RESERVA %TYPE)
AS
BEGIN

  DELETE FROM RESERVAS
    WHERE ID_RESERVA = r_ID_RESERVA;
  DBMS_OUTPUT.PUT_LINE('La reserva con ID: ' || r_ID_RESERVA || ' ha sido eliminada');

END;

/*---------------correr el procedimiento---------------*/
EXEC DELETE_RESERVAS(3);

/*---------------TRIGGER se dispara cuando una reserva es cancelada---------------*/
CREATE OR REPLACE TRIGGER TGR_DELETE_RESERVA
BEFORE DELETE ON RESERVAS
FOR EACH ROW
BEGIN
    INSERT INTO AUD_RESERVAS(
        ID_RESERVA,
        ESTADO,
        ID_CLASE,
        ID_CLIENTE,
        ACCION
    ) VALUES (
        :OLD.ID_RESERVA,
        :OLD.ESTADO,
        :OLD.ID_CLASE,
        :OLD.ID_CLIENTE,
        'DELETE'
    );
END;


--------------CRUD de Horarios-------------------------------------
CREATE OR REPLACE PROCEDURE INSERT_HORARIO(
    h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE,
    h_DIA IN HORARIO.DIA%TYPE,
    h_HORA_INICIO IN HORARIO.HORA_INICIO%TYPE,
    h_HORA_FIN IN HORARIO.HORA_FIN%TYPE)
AS
BEGIN
    INSERT INTO HORARIO (ID_HORARIO, DIA, HORA_INICIO, HORA_FIN)
    VALUES (h_ID_HORARIO, h_DIA, h_HORA_INICIO, h_HORA_FIN);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El horario con ID: ' || h_ID_HORARIO || ' ha sido insertado.');
END;

/*---------------correr el procedimiento---------------*/
EXEC INSERT_HORARIO(4,'Miercoles', TO_TIMESTAMP('18:00', 'HH24:MI:SS'), TO_TIMESTAMP('20:00', 'HH24:MI:SS'));



/*---------SP para modificar el dia del horario-------------------*/
CREATE OR REPLACE PROCEDURE UPDATE_HORARIO(
	   h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE,
	   h_DIA IN HORARIO.DIA%TYPE)
AS
BEGIN

  UPDATE HORARIO
    SET DIA = h_DIA
    WHERE ID_HORARIO = h_ID_HORARIO;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('El dia con el horario ID de: ' || h_ID_HORARIO || ' ha sido modificado');

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_HORARIO(3,'Lunes');

/*---------SP para modificar la hora de inicio de un horario-------------------*/
CREATE OR REPLACE PROCEDURE UPDATE_HORARIO_INICIO(
	   h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE,
	   h_HORA_INICIO IN HORARIO.HORA_INICIO%TYPE)
AS
BEGIN

  UPDATE HORARIO
    SET HORA_INICIO = h_HORA_INICIO
    WHERE ID_HORARIO = h_ID_HORARIO;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('La hora de inicio para el horario con ID: ' || h_ID_HORARIO || ' ha sido modificada a ' || h_HORA_INICIO);

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_HORARIO_INICIO(3,TO_TIMESTAMP('14:00', 'HH24:MI:SS'));

/*---------SP para modificar la hora de finalizacion de un horario-------------------*/
CREATE OR REPLACE PROCEDURE UPDATE_HORARIO_FIN(
	   h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE,
	   h_HORA_FIN IN HORARIO.HORA_FIN%TYPE)
AS
BEGIN

  UPDATE HORARIO
    SET HORA_FIN = h_HORA_FIN
    WHERE ID_HORARIO = h_ID_HORARIO;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('La hora de finalizacion para el horario con ID: ' || h_ID_HORARIO || ' ha sido modificada a ' || h_HORA_FIN);

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_HORARIO_FIN(3,TO_TIMESTAMP('18:00', 'HH24:MI:SS'));

/*---------SP para eliminar horarios-------------------*/
CREATE OR REPLACE PROCEDURE DELETE_HORARIO(
	   h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE)
AS
BEGIN

  DELETE FROM HORARIO
    WHERE ID_HORARIO = h_ID_HORARIO;
  DBMS_OUTPUT.PUT_LINE('El horario con ID: ' || h_ID_HORARIO || ' ha sido eliminado');

END;

/*---------------correr el procedimiento---------------*/
EXEC DELETE_HORARIO(4);


----------------------CRUD para facturas------------------------------
CREATE OR REPLACE PROCEDURE INSERT_FACTURA(
    f_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,
    f_ID_CLIENTE IN FACTURA.ID_CLIENTE%TYPE,
    f_MONTO IN FACTURA.MONTO%TYPE,
    f_FECHA IN FACTURA.FECHA%TYPE,
    f_DESCRIPCION IN FACTURA.DESCRIPCION%TYPE)
AS
BEGIN
    INSERT INTO FACTURA(ID_FACTURA, ID_CLIENTE, MONTO, FECHA, DESCRIPCION)
    VALUES (f_ID_FACTURA, f_ID_CLIENTE, f_MONTO, f_FECHA, f_DESCRIPCION);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El registro de factura con ID: ' || f_ID_FACTURA || ' ha sido insertado.');
END;

/*---------------correr el procedimiento---------------*/
EXEC INSERT_FACTURA(3, 2, 50000, TO_DATE('2023-10-30', 'YYYY-MM-DD'), 'Pago de membresia');

---------------Trigger se dispara cuando una reserva es agregada-----------------------
CREATE OR REPLACE TRIGGER TGR_INSERT_FACTURA
BEFORE INSERT ON FACTURA
FOR EACH ROW
BEGIN
    INSERT INTO AUD_FACTURA (
        ID_FACTURA,
        ID_CLIENTE,
        MONTO,
        FECHA,
        DESCRIPCION,
        ACCION
    ) VALUES (
        :NEW.ID_FACTURA,
        :NEW.ID_CLIENTE,
        :NEW.MONTO,
        :NEW.FECHA,
        :NEW.DESCRIPCION,
        'INSERT'
    );
END;

/*---------SP para modificar el cliente en la tabla FACTURA-------------------*/
CREATE OR REPLACE PROCEDURE UPDATE_FACTURA(
	   f_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,
	   f_ID_CLIENTE IN FACTURA.ID_CLIENTE%TYPE)
AS
BEGIN

  UPDATE FACTURA
    SET ID_CLIENTE = f_ID_CLIENTE
    WHERE ID_FACTURA = f_ID_FACTURA;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('La factura con el ID: ' || f_ID_FACTURA || ' ha sido modificado');

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_FACTURA(1,3);

/*---------SP para eliminar factura-------------------*/
CREATE OR REPLACE PROCEDURE DELETE_FACTURA(
	   f_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE)
AS
BEGIN

  DELETE FROM FACTURA
    WHERE ID_FACTURA = f_ID_FACTURA;
  DBMS_OUTPUT.PUT_LINE('La factura con ID: ' || f_ID_FACTURA || ' ha sido eliminada');

END;

/*---------------correr el procedimiento---------------*/
EXEC DELETE_FACTURA(3);

/*--------------------CRUD tabla CLASE---------------------------------------*/
/*---------SP para insertar clases-------------------*/
CREATE OR REPLACE PROCEDURE INSERT_CLASE(
	   c_ID_CLASE IN CLASES.ID_CLASE%TYPE,
       c_DESCRIPCION IN CLASES.DESCRIPCION%TYPE,
	   c_ESTADO IN CLASES.ESTADO%TYPE,
	   c_ESPACIOS IN CLASES.ESPACIOS%TYPE,
	   c_ID_EMPLEADO IN CLASES.ID_EMPLEADO%TYPE,
       c_ID_HORARIO IN CLASES.ID_HORARIO%TYPE)
IS
BEGIN

  INSERT INTO CLASES("ID_CLASE", "DESCRIPCION", "ESTADO", "ESPACIOS", "ID_EMPLEADO","ID_HORARIO") 
  VALUES (c_ID_CLASE, c_DESCRIPCION, c_ESTADO, c_ESPACIOS, c_ID_EMPLEADO, c_ID_HORARIO);
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('El registro para la clase con ID ' || c_ID_CLASE|| ' ha sido insertado');

END;

/*---------------correr el procedimiento---------------*/
EXEC INSERT_CLASE(4,'GAP','Activa',3,1,1);

/*---------SP para modificar el Empleado encargado de una clase segun el ID de la clase----*/
CREATE OR REPLACE PROCEDURE UPDATE_CLASE_EMPLEADO(
	   c_ID_CLASE  IN CLASES.ID_CLASE %TYPE,
	   c_ID_EMPLEADO IN CLASES.ID_EMPLEADO%TYPE)
AS
BEGIN

  UPDATE CLASES
    SET ID_EMPLEADO = c_ID_EMPLEADO
    WHERE ID_CLASE = c_ID_CLASE;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('EL encargado de impartir la clase ahora es el instructor con ID: ' || c_ID_EMPLEADO );

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_CLASE_EMPLEADO(4,2);

/*---------SP para eliminar clases-------------------*/
CREATE OR REPLACE PROCEDURE DELETE_CLASE(
	   c_ID_CLASE IN CLASES.ID_CLASE%TYPE)
AS
BEGIN

  DELETE FROM CLASES
    WHERE ID_CLASE = c_ID_CLASE;
  DBMS_OUTPUT.PUT_LINE('La clase con el ID: ' || c_ID_CLASE || ' ha sido eliminada');

END;

/*---------------correr el procedimiento---------------*/
EXEC DELETE_CLASE(4)

---------------Trigger se dispara cuando una clase es eliminada-----------------------
CREATE OR REPLACE TRIGGER TGR_AUD_CLASES
BEFORE DELETE ON CLASES
FOR EACH ROW
BEGIN
    INSERT INTO AUD_CLASES(
        ID_CLASE,
        DESCRIPCION,
        ESTADO,
        ESPACIOS,
        ID_EMPLEADO,
        ID_HORARIO,
        ACCION
    ) VALUES (
        :old.ID_CLASE,
        :old.DESCRIPCION,
        :old.ESTADO,
        :old.ESPACIOS,
        :old.ID_EMPLEADO,
        :old.ID_HORARIO,
        'DELETE'
    );
END;

/*---------SP para modificar el nombre de la clase segun el ID ----*/
CREATE OR REPLACE PROCEDURE UPDATE_CLASE_DESCRIPCION(
	   c_ID_CLASE  IN CLASES.ID_CLASE %TYPE,
	   c_DESCRIPCION IN CLASES.DESCRIPCION%TYPE)
AS
BEGIN

  UPDATE CLASES
    SET DESCRIPCION = c_DESCRIPCION
    WHERE ID_CLASE = c_ID_CLASE;
    COMMIT;
  DBMS_OUTPUT.PUT_LINE('La clase con ID: ' || c_ID_CLASE || ' ahora se llama ' || c_DESCRIPCION);

END;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_CLASE_DESCRIPCION(3,'Kickbox');

/*--------------------CRUD tabla Empleado---------------------------------------*/
/*---------SP para insertar Empleados-------------------*/
CREATE OR REPLACE PROCEDURE INSERT_EMPLEADO(
	   e_ID_EMPLEADO IN EMPLEADO.ID_EMPLEADO%TYPE,
	   e_NOMBRE IN EMPLEADO.NOMBRE%TYPE,
	   e_APELLIDO IN EMPLEADO.APELLIDO%TYPE,
	   e_FECHA_INICIO IN EMPLEADO.FECHA_INICIO%TYPE,
	   e_ESTADO IN EMPLEADO.ESTADO%TYPE,
	   e_SALARIO IN EMPLEADO.SALARIO%TYPE,
	   e_EMAIL IN EMPLEADO.EMAIL%TYPE,
	   e_TELEFONO IN EMPLEADO.TELEFONO%TYPE,
	   e_PUESTO IN EMPLEADO.PUESTO%TYPE)
IS
BEGIN

  INSERT INTO EMPLEADO("ID_EMPLEADO", "NOMBRE", "APELLIDO", "FECHA_INICIO","ESTADO","SALARIO","EMAIL","TELEFONO","PUESTO") 
  VALUES (e_ID_EMPLEADO, e_NOMBRE, e_APELLIDO, e_FECHA_INICIO, e_ESTADO, e_SALARIO, e_EMAIL, e_TELEFONO, e_PUESTO);
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('El registro del empleado ' || e_NOMBRE || ' ' || e_APELLIDO || ' ha sido insertado');

END;

/*---------------correr el procedimiento---------------*/
EXEC INSERT_EMPLEADO(6,'Lili','Lopez','10/11/2010','Activo',500000,'lil@.com',5462258, 'Oficinista');

/*---------------------trigger que se dispara cuando se inserta un nuevo empleado-------------*/
CREATE OR REPLACE TRIGGER TGR_INSERT_EMPLEADO
BEFORE INSERT ON EMPLEADO
FOR EACH ROW
BEGIN
    INSERT INTO AUD_EMPLEADO (
        ID_EMPLEADO,
        NOMBRE,
        APELLIDO,
        FECHA_INICIO,
        ESTADO,
        SALARIO,
        EMAIL,
        TELEFONO,
        PUESTO,
        ACCION
    ) VALUES (
        :NEW.ID_EMPLEADO,
        :NEW.NOMBRE,
        :NEW.APELLIDO,
        :NEW.FECHA_INICIO,
        :NEW.ESTADO,
        :NEW.SALARIO,
        :NEW.EMAIL,
        :NEW.TELEFONO,
        :NEW.PUESTO,
        'INSERT'
    );
END;

/*---------SP para modificar el salario de un empleado----*/
CREATE OR REPLACE PROCEDURE UPDATE_EMPLEADO_SALARIO 
AS
BEGIN
    FOR EMPLEADO IN (SELECT * FROM EMPLEADO) LOOP
        DECLARE
            anios_trabajados INT;
        BEGIN
            -- Calcular los anios
            SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, EMPLEADO.FECHA_INICIO) / 12) INTO anios_trabajados
            FROM DUAL;

            -- Incrementar salario si tiene mas de 5 anios a un 5%
            IF anios_trabajados > 5 THEN
                UPDATE EMPLEADO
                SET SALARIO = SALARIO * 1.05
                WHERE ID_EMPLEADO = EMPLEADO.ID_EMPLEADO;
            END IF;
        END;
    END LOOP;
    COMMIT;
END UPDATE_EMPLEADO_SALARIO;

/*---------------correr el procedimiento---------------*/
EXEC UPDATE_EMPLEADO_SALARIO;


--Eliminar empleado inactivo con SP
CREATE OR REPLACE PROCEDURE EliminarEmpleadoInactivo AS
BEGIN
    -- Eliminar empleados inactivos
    DELETE FROM EMPLEADO WHERE ESTADO = 'Inactivo';
    
    -- Confirmar la transaccion
    COMMIT;
    
    -- Mostrar mensaje de inactivo
    DBMS_OUTPUT.PUT_LINE('Empleados inactivos eliminados correctamente.');
END EliminarEmpleadoInactivo;

/*---------------correr el procedimiento---------------*/
EXEC EliminarEmpleadoInactivo;
------------------------------------------------------------------------------
------------------------- Funciones para la tabla EMPLEADO ---------------

CREATE OR REPLACE FUNCTION GET_ALL_EMPLEADOS
RETURN SYS_REFCURSOR
IS
    emp_cursor SYS_REFCURSOR;
BEGIN
    OPEN emp_cursor FOR
        SELECT * FROM EMPLEADO;
    RETURN emp_cursor;
END;

CREATE OR REPLACE FUNCTION GET_EMPLEADOS_BY_SALARIO(
    E_SALARIO IN EMPLEADO.SALARIO%TYPE)
RETURN SYS_REFCURSOR
IS
    emp_cursor SYS_REFCURSOR;
BEGIN
    OPEN emp_cursor FOR
        SELECT * FROM EMPLEADO WHERE SALARIO = E_SALARIO;
    RETURN emp_cursor;
END;

DECLARE
    emp_cursor SYS_REFCURSOR;
BEGIN
    -- Llamar a la funcion para obtener todos los empleados
    emp_cursor := GET_ALL_EMPLEADOS;

    -- Iterar a traves del cursor y hacer algo con los resultados
    FOR emp_rec IN emp_cursor
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_EMPLEADO: ' || emp_rec.ID_EMPLEADO || ', NOMBRE: ' || emp_rec.NOMBRE);
    END LOOP;

    -- Llamar a la funcion para obtener empleados por salario
    emp_cursor := GET_EMPLEADOS_BY_SALARIO(50000);

    -- Usar a traves del cursor y hacer algo con los resultados
    FOR emp_rec IN emp_cursor
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID_EMPLEADO: ' || emp_rec.ID_EMPLEADO || ', NOMBRE: ' || emp_rec.NOMBRE);
    END LOOP;
END;
/



-- Cursor para la tabla FACTURA donde el monto es de 50000
   CURSOR c_factura IS
        SELECT 1 AS ID_FACTURA, 1 AS ID_CLIENTE, 50000 AS MONTO, TO_DATE('2023-10-30', 'YYYY-MM-DD') AS FECHA,
        'Pago de membresias' AS DESCRIPCION FROM DUAL;

   -- Cursor para la tabla RESERVAS confirmada
    CURSOR c_reservas IS
        SELECT 1 AS ID_RESERVA, TO_DATE('2023-10-30', 'YYYY-MM-DD') AS FECHA, TO_DATE('14:00', 'HH24:MI') AS HORA,
        'Confirmada' AS ESTADO, 2 AS ID_CLIENTE FROM DUAL;
    
    -- Cursor para la tabla HORARIO
    CURSOR c_horario IS
        SELECT 1 AS ID_HORARIO, 'Lunes' AS DIA, TO_DATE('08:30', 'HH24:MI') AS HORA_INICIO, TO_DATE('10:00', 'HH24:MI') AS HORA_FIN,
        'Clase de Yoga' AS CLASE FROM DUAL;

   -- Cursor para la tabla EMPLEADO
   CURSOR c_empleado IS
	SELECT * FROM EMPLEADO;

   -- Cursor membresias venciadas--
	CURSOR c_clientes_membresia_vencida IS
	   SELECT *
	   FROM CLIENTE c
	   JOIN MEMBRESIAS m ON c.ID_CLIENTE = m.ID_CLIENTE
	   WHERE m.FECHA_EXPIRACION < SYSDATE;
	
   -- Clases por instructor--
	CURSOR c_clases_por_instructor IS
	   SELECT ID_EMPLEADO, COUNT(*) AS CANTIDAD_CLASES
	   FROM CLASES
	   WHERE ESTADO = 'Activa'
	   GROUP BY ID_EMPLEADO;

   --Cursor facturas pendientes--
    	CURSOR c_reservas_pendientes IS
	   SELECT *
	   FROM RESERVAS
	   WHERE ESTADO = 'Pendiente';

   --Cursor empleados activos unicamente--
	CURSOR c_empleados_activos IS
	   SELECT *
	   FROM EMPLEADO
	   WHERE ESTADO = 'Activo';

   --Cursor clases canceladas--
	CURSOR c_clases_canceladas IS
	   SELECT *
	   FROM CLASES
	   WHERE ESTADO = 'Cancelada';

   --Cursor membresias vencidas del último mes--
	CURSOR c_membresias_vencidas_ultimo_mes IS
	   SELECT *
	   FROM MEMBRESIAS
	   WHERE FECHA_EXPIRACION BETWEEN ADD_MONTHS(SYSDATE, -1) AND SYSDATE;

   --Cursor de clases con espacios disponibles--
	CURSOR c_clases_con_espacios_disponibles IS
	   SELECT *
	   FROM CLASES
	   WHERE ESPACIOS > 0;

   --Cursor para ver facturas del ultimo mes--
	CURSOR c_facturas_ultimo_mes IS
	   SELECT *
	   FROM FACTURA
	   WHERE FECHA BETWEEN ADD_MONTHS(SYSDATE, -1) AND SYSDATE;

   --Cursor membresias activas--
	CURSOR c_membresias_activas IS
	    SELECT *
	    FROM MEMBRESIAS
	    WHERE ESTADO = 'Activo';

   --Cursor para ver clases activas--
	CURSOR c_clases_activas IS
	    SELECT *
	    FROM CLASES
	    WHERE ESTADO = 'Activa';
   --Cursor para ver salarios con mayor ingreso--
	CURSOR c_empleados_salario_alto IS
	    SELECT *
	    FROM EMPLEADO
	    WHERE SALARIO > 50000;

   --Clientes con mensualidad alta--
	CURSOR c_clientes_mensualidad_alta IS
	    SELECT *
	    FROM CLIENTE
	    WHERE MENSUALIDAD > 1;


        -- Insertar datos en la tabla RESERVAS
BEGIN
    FOR reserva IN c_reservas
    LOOP
        INSERT INTO RESERVAS (ID_RESERVA, FECHA, HORA, ESTADO, ID_CLIENTE)
        VALUES (reserva.ID_RESERVA, reserva.FECHA, reserva.HORA, reserva.ESTADO, reserva.ID_CLIENTE);
    END LOOP;

    COMMIT; -- Confirmar la transaccion
END;

BEGIN
-- Insertar datos en la tabla HORARIO
    FOR horario IN c_horario
    LOOP
        INSERT INTO HORARIO (ID_HORARIO, DIA, HORA_INICIO, HORA_FIN, CLASE)
        VALUES (horario.ID_HORARIO, horario.DIA, horario.HORA_INICIO, horario.HORA_FIN, horario.CLASE);
    END LOOP;
END;

-- Crear una vista que incluya la informacion de la tabla CLIENTE
CREATE VIEW Vista_Cliente AS
SELECT
    ID_CLIENTE,
    NOMBRE,
    APELLIDO,
    FECHAINGRESO,
    MENSUALIDAD
FROM CLIENTE;

-- Consulta utilizando la vista
SELECT * FROM Vista_Cliente;
-- Crear una vista que incluya la informacion de la tabla MEMBRESIAS
CREATE VIEW Vista_Membresias AS
SELECT
    ID_MEMBRESIA,
    TIPO,
    ESTADO,
    FECHA_INICIO,
    FECHA_EXPIRACION,
    ID_CLIENTE
FROM MEMBRESIAS;

-- Consulta utilizando la vista
SELECT * FROM Vista_Membresias;

-- Crear una vista que incluya la informacion de la tabla EMPLEADO
CREATE VIEW Vista_Empleado AS
SELECT
    ID_EMPLEADO,
    NOMBRE,
    APELLIDO,
    FECHA_INICIO,
    ESTADO,
    SALARIO,
    EMAIL,
    TELEFONO,
    PUESTO
FROM EMPLEADO;


-- Consulta utilizando la vista
SELECT * FROM Vista_Empleado;

-- Crear una vista que incluya la informacion de la tabla RESERVAS
CREATE VIEW Vista_Reservas AS
SELECT
    ID_RESERVA,
    ESTADO,
    ID_CLASE,
    ID_CLIENTE
FROM RESERVAS;

-- Consulta utilizando la vista
SELECT * FROM Vista_Reservas;

-- Crear una vista que incluya la informacion de la tabla FACTURA
CREATE VIEW Vista_Factura AS
SELECT
    ID_FACTURA,
    ID_CLIENTE,
    MONTO,
    FECHA,
    DESCRIPCION
FROM FACTURA;

-- Consulta utilizando la vista
SELECT * FROM Vista_Factura;

--Vista Reservas Actuales
CREATE OR REPLACE VIEW VISTA_RESERVAS_ACTUALES AS
SELECT R.ID_RESERVA, R.ESTADO, C.NOMBRE AS NOMBRE_CLIENTE, CL.DESCRIPCION AS DESCRIPCION_CLASE
FROM RESERVAS R
JOIN CLIENTE C ON R.ID_CLIENTE = C.ID_CLIENTE
JOIN CLASES CL ON R.ID_CLASE = CL.ID_CLASE
WHERE R.ESTADO = 'Activa';

SELECT * FROM VISTA_RESERVAS_ACTUALES;

--Vista Membresias Activas
CREATE OR REPLACE VIEW VISTA_MEMBRESIAS_ACTIVAS AS
SELECT M.ID_MEMBRESIA, M.TIPO, M.ESTADO, C.NOMBRE AS NOMBRE_CLIENTE
FROM MEMBRESIAS M
JOIN CLIENTE C ON M.ID_CLIENTE = C.ID_CLIENTE
WHERE M.ESTADO = 'Activo';

SELECT * FROM VISTA_MEMBRESIAS_ACTIVAS;

--Vista para Instructor y su clase
CREATE OR REPLACE VIEW VISTA_INSTRUCTORES_CLASES AS
SELECT E.NOMBRE AS NOMBRE_INSTRUCTOR, E.PUESTO, CL.DESCRIPCION AS DESCRIPCION_CLASE
FROM EMPLEADO E
JOIN CLASES CL ON E.ID_EMPLEADO = CL.ID_EMPLEADO;

SELECT * FROM VISTA_INSTRUCTORES_CLASES;

--Vista para facturas emitidas
CREATE OR REPLACE VIEW VISTA_FACTURAS_EMITIDAS AS
SELECT F.ID_FACTURA, F.MONTO, F.FECHA, C.NOMBRE AS NOMBRE_CLIENTE
FROM FACTURA F
JOIN CLIENTE C ON F.ID_CLIENTE = C.ID_CLIENTE;

SELECT * FROM VISTA_FACTURAS_EMITIDAS;

--Vista de Clientes y sus Membresias
CREATE OR REPLACE VIEW VISTA_CLIENTES_MEMBRESIAS AS
SELECT C.NOMBRE AS NOMBRE_CLIENTE, M.TIPO, M.FECHA_INICIO, M.FECHA_EXPIRACION
FROM CLIENTE C
JOIN MEMBRESIAS M ON C.ID_CLIENTE = M.ID_CLIENTE;

SELECT * FROM VISTA_CLIENTES_MEMBRESIAS;

--RESTO DEL CRUD DE EMPLEADO
-- Leer todos los empleados
SELECT * FROM EMPLEADO;

-- Leer un empleado especifico por ID
SELECT * FROM EMPLEADO WHERE ID_EMPLEADO = 1;

-- Actualizar informacion de un empleado
UPDATE EMPLEADO
SET SALARIO = 55000, ESTADO = 'Inactivo'
WHERE ID_EMPLEADO = 1;

-- Eliminar un empleado por ID
DELETE FROM EMPLEADO WHERE ID_EMPLEADO = 1;

--FUNCION DE FACTURA DE SU FECHA DE INICIO HASTA HOY
SELECT MONTHS_BETWEEN(FECHA_INICIO, SYSDATE) FROM EMPLEADO;

--Funcion del numero total de reservas por el estado que se tiene
SELECT ESTADO, COUNT(*) AS CANTIDAD
FROM RESERVAS
GROUP BY ESTADO;

--Funcion del promedio de montos de factura por cada cliente
SELECT ID_CLIENTE, AVG(MONTO) AS PROMEDIO_MONTO
FROM FACTURA
GROUP BY ID_CLIENTE;

--Funcion para ver todos los clientes--
CREATE OR REPLACE FUNCTION GET_ALL_CLIENTES
RETURN SYS_REFCURSOR
IS
    cliente_cursor SYS_REFCURSOR;
BEGIN
    OPEN cliente_cursor FOR
        SELECT * FROM CLIENTE;
    RETURN cliente_cursor;
END;

--Funcion para obtener todos los empleados--
CREATE OR REPLACE FUNCTION GET_ALL_EMPLEADOS
RETURN SYS_REFCURSOR
IS
    empleado_cursor SYS_REFCURSOR;
BEGIN
    OPEN empleado_cursor FOR
        SELECT * FROM EMPLEADO;
    RETURN empleado_cursor;
END;


--Funcion para obtener todas las reservas--
CREATE OR REPLACE FUNCTION GET_ALL_RESERVAS
RETURN SYS_REFCURSOR
IS
    reservas_cursor SYS_REFCURSOR;
BEGIN
    OPEN reservas_cursor FOR
        SELECT * FROM RESERVAS;
    RETURN reservas_cursor;
END;


--Funcion para obtener todas las facturas--
CREATE OR REPLACE FUNCTION GET_ALL_FACTURAS
RETURN SYS_REFCURSOR
IS
    factura_cursor SYS_REFCURSOR;
BEGIN
    OPEN factura_cursor FOR
        SELECT * FROM FACTURA;
    RETURN factura_cursor;
END;

	
--Actualizar horarios--
/* CREATE OR REPLACE PROCEDURE UPDATE_HORARIO(
    h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE,
    h_CLASE IN HORARIO.CLASE%TYPE)
AS
BEGIN
    UPDATE HORARIO
    SET CLASE = h_CLASE
    WHERE ID_HORARIO = h_ID_HORARIO;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('La clase con el horario ID de: ' || h_ID_HORARIO || ' ha sido modificada.');
END;*/

--Eliminar horarios--
/*CREATE OR REPLACE PROCEDURE DELETE_HORARIO(
    h_ID_HORARIO IN HORARIO.ID_HORARIO%TYPE)
AS
BEGIN
    DELETE FROM HORARIO
    WHERE ID_HORARIO = h_ID_HORARIO;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El horario con ID: ' || h_ID_HORARIO || ' ha sido eliminado.');
END;*/

--Consulta horario--
CREATE OR REPLACE FUNCTION GET_ALL_HORARIOS
RETURN SYS_REFCURSOR
IS
    horario_cursor SYS_REFCURSOR;
BEGIN
    OPEN horario_cursor FOR
        SELECT * FROM HORARIO;
    RETURN horario_cursor;
END;


--Actualizar cliente de factura--
/*CREATE OR REPLACE PROCEDURE UPDATE_FACTURA(
    f_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE,
    f_ID_CLIENTE IN FACTURA.ID_CLIENTE%TYPE)
AS
BEGIN
    UPDATE FACTURA
    SET ID_CLIENTE = f_ID_CLIENTE
    WHERE ID_FACTURA = f_ID_FACTURA;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El cliente de la factura con ID: ' || f_ID_FACTURA || ' ha sido modificado.');
END;*/

--Eliminar factura--
/*CREATE OR REPLACE PROCEDURE DELETE_FACTURA(
    f_ID_FACTURA IN FACTURA.ID_FACTURA%TYPE)
AS
BEGIN
    DELETE FROM FACTURA
    WHERE ID_FACTURA = f_ID_FACTURA;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('El registro de factura con ID: ' || f_ID_FACTURA || ' ha sido eliminado.');
END;*/

--Consulta de facturas--
CREATE OR REPLACE FUNCTION GET_ALL_FACTURAS
RETURN SYS_REFCURSOR
IS
    factura_cursor SYS_REFCURSOR;
BEGIN
    OPEN factura_cursor FOR
        SELECT * FROM FACTURA;
    RETURN factura_cursor;
END;

--PAQUETES--

CREATE OR REPLACE PACKAGE ClientePackage AS
    PROCEDURE InsertarCliente(
        p_ID_CLIENTE IN NUMBER,
        p_NOMBRE IN VARCHAR2,
        p_APELLIDO IN VARCHAR2,
        p_FECHAINGRESO IN DATE,
        p_MENSUALIDAD IN NUMBER
    );

    PROCEDURE ActualizarMensualidad(
        p_ID_CLIENTE IN NUMBER,
        p_NUEVA_MENSUALIDAD IN NUMBER
    );

    PROCEDURE EliminarCliente(
        p_ID_CLIENTE IN NUMBER
    );

    FUNCTION ObtenerClientes RETURN SYS_REFCURSOR;
END ClientePackage;
/

CREATE OR REPLACE PACKAGE MembresiaPackage AS
    PROCEDURE InsertarMembresia(
        p_ID_MEMBRESIA IN NUMBER,
        p_TIPO IN VARCHAR2,
        p_ESTADO IN VARCHAR2,
        p_FECHA_INICIO IN DATE,
        p_FECHA_EXPIRACION IN DATE,
        p_ID_CLIENTE IN NUMBER
    );

    PROCEDURE ActualizarEstadoMembresia(
        p_ID_CLIENTE IN NUMBER,
        p_NUEVO_ESTADO IN VARCHAR2
    );

    PROCEDURE EliminarMembresia(
        p_ID_MEMBRESIA IN NUMBER
    );

    FUNCTION ObtenerMembresias RETURN SYS_REFCURSOR;
END MembresiaPackage;
/

CREATE OR REPLACE PACKAGE EmpleadoPackage AS
    PROCEDURE InsertarEmpleado(
        p_ID_EMPLEADO IN NUMBER,
        p_NOMBRE IN VARCHAR2,
        p_APELLIDO IN VARCHAR2,
        p_FECHA_INICIO IN DATE,
        p_ESTADO IN VARCHAR2,
        p_SALARIO IN NUMBER,
        p_EMAIL IN VARCHAR2,
        p_TELEFONO IN NUMBER,
        p_PUESTO IN VARCHAR2
    );

    PROCEDURE ActualizarSalario(
        p_ID_EMPLEADO IN NUMBER,
        p_NUEVO_SALARIO IN NUMBER
    );

    PROCEDURE EliminarEmpleado(
        p_ID_EMPLEADO IN NUMBER
    );

    FUNCTION ObtenerEmpleados RETURN SYS_REFCURSOR;
END EmpleadoPackage;
/

CREATE OR REPLACE PACKAGE ClasePackage AS
    PROCEDURE InsertarClase(
        p_ID_CLASE IN NUMBER,
        p_DESCRIPCION IN VARCHAR2,
        p_ESTADO IN VARCHAR2,
        p_ESPACIOS IN NUMBER,
        p_ID_EMPLEADO IN NUMBER,
        p_ID_HORARIO IN NUMBER
    );

    PROCEDURE ActualizarEstadoClase(
        p_ID_CLASE IN NUMBER,
        p_NUEVO_ESTADO IN VARCHAR2
    );

    PROCEDURE EliminarClase(
        p_ID_CLASE IN NUMBER
    );

    FUNCTION ObtenerClases RETURN SYS_REFCURSOR;
END ClasePackage;
/

CREATE OR REPLACE PACKAGE ReservaPackage AS
    PROCEDURE InsertarReserva(
        p_ID_RESERVA IN NUMBER,
        p_ESTADO IN VARCHAR2,
        p_ID_CLASE IN NUMBER,
        p_ID_CLIENTE IN NUMBER
    );

    PROCEDURE ActualizarEstadoReserva(
        p_ID_RESERVA IN NUMBER,
        p_NUEVO_ESTADO IN VARCHAR2
    );

    PROCEDURE EliminarReserva(
        p_ID_RESERVA IN NUMBER
    );

    FUNCTION ObtenerReservas RETURN SYS_REFCURSOR;
END ReservaPackage;
/

CREATE OR REPLACE PACKAGE HorarioPackage AS
    PROCEDURE InsertarHorario(
        p_ID_HORARIO IN NUMBER,
        p_DIA IN VARCHAR2,
        p_HORA_INICIO IN TIMESTAMP,
        p_HORA_FIN IN TIMESTAMP
    );

    PROCEDURE ActualizarDiaHorario(
        p_ID_HORARIO IN NUMBER,
        p_NUEVO_DIA IN VARCHAR2
    );

    PROCEDURE EliminarHorario(
        p_ID_HORARIO IN NUMBER
    );

    FUNCTION ObtenerHorarios RETURN SYS_REFCURSOR;
END HorarioPackage;
/

CREATE OR REPLACE PACKAGE FacturaPackage AS
    PROCEDURE InsertarFactura(
        p_ID_FACTURA IN NUMBER,
        p_ID_CLIENTE IN NUMBER,
        p_MONTO IN NUMBER,
        p_FECHA IN DATE,
        p_DESCRIPCION IN VARCHAR2
    );

    PROCEDURE ActualizarMontoFactura(
        p_ID_FACTURA IN NUMBER,
        p_NUEVO_MONTO IN NUMBER
    );

    PROCEDURE EliminarFactura(
        p_ID_FACTURA IN NUMBER
    );

    FUNCTION ObtenerFacturas RETURN SYS_REFCURSOR;
END FacturaPackage;
/

CREATE OR REPLACE PACKAGE EquipoPackage AS
    PROCEDURE InsertarEquipo(
        p_ID_EQUIPO IN NUMBER,
        p_NOMBRE IN VARCHAR2,
        p_ESTADO IN VARCHAR2
    );

    PROCEDURE ActualizarEstadoEquipo(
        p_ID_EQUIPO IN NUMBER,
        p_NUEVO_ESTADO IN VARCHAR2
    );

    PROCEDURE EliminarEquipo(
        p_ID_EQUIPO IN NUMBER
    );

    FUNCTION ObtenerEquipos RETURN SYS_REFCURSOR;
END EquipoPackage;
/

CREATE OR REPLACE PACKAGE EvaluacionPackage AS
    PROCEDURE InsertarEvaluacion(
        p_ID_EVALUACION IN NUMBER,
        p_FECHA IN DATE,
        p_PUNTUACION IN NUMBER,
        p_ID_CLIENTE IN NUMBER,
        p_ID_EMPLEADO IN NUMBER
    );

    PROCEDURE ActualizarPuntuacionEvaluacion(
        p_ID_EVALUACION IN NUMBER,
        p_NUEVA_PUNTUACION IN NUMBER
    );

    PROCEDURE EliminarEvaluacion(
        p_ID_EVALUACION IN NUMBER
    );

    FUNCTION ObtenerEvaluaciones RETURN SYS_REFCURSOR;
END EvaluacionPackage;
/

CREATE OR REPLACE PACKAGE ReportePackage AS
    FUNCTION GenerarReporteClientes RETURN SYS_REFCURSOR;

    FUNCTION GenerarReporteMembresias RETURN SYS_REFCURSOR;

    FUNCTION GenerarReporteIngresos(
        p_FECHA_INICIO IN DATE,
        p_FECHA_FIN IN DATE
    ) RETURN SYS_REFCURSOR;
END ReportePackage;
/


--PAQUETES FIN--
